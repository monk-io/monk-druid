---
namespace: druid

base:
  metadata:
    defines: metadata
    name: Apache Druid
    shortname: Apache Druid
    description: |
      Apache Druid (also known as Druid) is an open-source distributed data store designed to handle large-scale data sets and provide fast query performance for real-time and historical data. It is designed for use cases such as business intelligence, analytics, and event-driven applications.
      Druid uses a columnar storage format optimized for fast querying and aggregation of data. It supports both real-time and batch data ingestion and provides a scalable and fault-tolerant distributed architecture that can be easily scaled horizontally across multiple nodes.
      Druid includes a variety of built-in data ingestion tools that can handle a wide range of data sources, including log files, databases, and real-time streams. It also includes a SQL-like query language that allows users to query and aggregate data in real-time and historical contexts.
      Druid provides a variety of data processing features, including rollup, filtering, and grouping. It also includes support for machine learning algorithms and other advanced analytical functions. Druid includes a number of built-in visualization tools for creating charts, graphs, and other data visualizations.
    website: https://druid.apache.org/
    publisher: monk.io
    tags:
    source: https://github.com/apache/druid
    icon: https://druid.apache.org/img/druid_nav.png
  connections:
    zookeeper:
      runnable: druid/dzookeeper
      service: zookeeper-svc
    db:
      runnable: druid/db
      service: postgres-svc
  containers:
    druid:
      image-tag: <- `${image_tag}`
      image: apache/druid
  variables:
    java_xmx:
      type: string
      value: 1024m
      env: DRUID_XMX
    java_xms:
      type: string
      value: 1024m
      env: DRUID_XMS
    java_max_new_size:
      type: string
      value: 256m
      env: DRUID_MAXNEWSIZE
    java_max_direct_memory:
      type: string
      value: 512m
      env: DRUID_MAXDIRECTMEMORYSIZE
    single_node:
      type: string
      value: micro-quickstart
      env: DRUID_SINGLE_NODE_CONF
    log_level:
      type: string
      value: debug
      env: druid_emitter_logging_logLevel
    extensions:
      env: druid_extensions_loadList
      type: string
      value: '["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage", "druid-multi-stage-query"]'
    zookeeper_host:
      env: druid_zk_service_host
      type: string
      value: <- connection-hostname("zookeeper")
    metadata_storage_type:
      env: druid_metadata_storage_type
      type: string
      value: postgresql
    metadata_storage_connector_user:
      env: druid_metadata_storage_connector_user
      type: string
      value: monk
    metadata_storage_connector_password:
      env: druid_metadata_storage_connector_password
      type: string
      value: adminpassword
    postgres_host:
      env: druid_postgres_host
      type: string
      value: <- connection-hostname("db")
    metadata_storage_connector_connectURI:
      env: druid_metadata_storage_connector_connectURI
      type: string
      value: <- `jdbc:postgresql://${postgres_host}:5432/monk`
    log4j:
      type: string
      value: <?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root><Logger name="org.apache.druid.jetty.RequestLog"
        additivity="false" level="DEBUG"><AppenderRef ref="Console"/></Logger></Loggers></Configuration>
      env: DRUID_LOG4J
    coordinator_balance:
      type: string
      value: cachingCost
      env: druid_coordinator_balancer_strategy
    indexer:
      type: string
      value:
        - -server
        - -Xmx1g
        - -Xms1g
        - -XX:MaxDirectMemorySize=3g
        - -Duser.timezone=UTC
        - -Dfile.encoding=UTF-8
        - -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
      env: druid_indexer_runner_javaOptsArray
    droid_storage_type:
      type: string
      value: local
      env: druid_storage_type
    droid_storage_directory:
      type: string
      value: /opt/shared
      env: druid_storage_directory
    druid_processing_num:
      type: string
      value: 2
      env: druid_processing_numThreads
    druid_processing_num_merge:
      type: string
      value: 2
      env: druid_processing_numMergeBuffers
    druid_processing_buffer:
      type: string
      value: 56m
      env: druid_processing_buffer_sizeBytes
    image_tag:
      type: string
      value: 24.0.1
    broker_port:
      type: string
      value: 8082
    volume_data:
      type: string
      value: <- `${monk-volume-path}/druid`

dzookeeper:
  defines: runnable
  metadata:
    private: true
  variables:
    admin_server:
      env: ZOO_ADMINSERVER_ENABLED
      type: bool
      value: true
    port:
      type: int
      value: 2181
    image:
      type: string
      value: latest
  containers:
    db:
      image: zookeeper
      image-tag: <- `${image}`
  services:
    zookeeper-svc:
      port: 2181
      container: db
      protocol: tcp

db:
  metadata:
    private: true
  inherits: postgresql/db
  defines: runnable
  variables:
    db_username:
      env: POSTGRES_USER
      value: monk
      type: string
    postgres_password:
      env: POSTGRES_PASSWORD
      type: string
      value: adminpassword
    db_name:
      env: POSTGRES_DB
      type: string
      value: monk

coordinator:
  defines: runnable
  metadata:
    private: true
  inherits: druid/base
  variables:
    image_tag:
      type: string
      value: 24.0.1
    coodinator_port:
      type: string
      value: 8081
    volume_data:
      type: string
      value: <- `${monk-volume-path}/druid`
  containers:
    druid:
      bash: /druid.sh coordinator
      paths:
        - <- `${volume_data}/shared:/opt/shared`
        - <- `${volume_data}/coordinator:/opt/druid/var`
      environment:
        - druid_indexer_runner_javaOptsArray=["-server", "-Xmx1g", "-Xms1g", "-XX:MaxDirectMemorySize=3g", "-Duser.timezone=UTC", "-Dfile.encoding=UTF-8", "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager"]
  services:
    coordinator-svc:
      port: 8081
      container: druid
      protocol: tcp
  depends:
    wait-for:
      runnables:
        - druid/dzookeeper
        - druid/db
      timeout: 30

broker:
  defines: runnable
  inherits: druid/base
  containers:
    druid:
      bash: /druid.sh broker
      paths:
        - <- `${volume_data}/shared:/opt/shared`
  depends:
    wait-for:
      runnables:
        - druid/dzookeeper
        - druid/db
        - druid/coordinator
      timeout: 30
  services:
    broker-svc:
      port: 8082
      container: druid
      protocol: tcp
      host-port: <- `${broker_port}`

historical:
  defines: runnable
  inherits: druid/base
  variables:
    image_tag:
      type: string
      value: 24.0.1
    coodinator_port:
      type: string
      value: 8083
    volume_data:
      type: string
      value: <- `${monk-volume-path}/druid`
  containers:
    druid:
      bash: /druid.sh historical
      paths:
        - <- `${volume_data}/shared:/opt/shared`
  depends:
    wait-for:
      runnables:
        - druid/dzookeeper
        - druid/db
        - druid/coordinator
      timeout: 30
  services:
    historical-svc:
      port: 8083
      container: druid
      protocol: tcp
      host-port: <- `${coodinator_port}`

middlemanager:
  defines: runnable
  inherits: druid/base
  metadata:
    private: true
  variables:
    image_tag:
      type: string
      value: 24.0.1
    middlemanager_port:
      type: string
      value: 8091
    volume_data:
      type: string
      value: <- `${monk-volume-path}/druid`
  containers:
    druid:
      bash: /druid.sh middleManager
      paths:
        - <- `${volume_data}/shared:/opt/shared`
  depends:
    wait-for:
      runnables:
        - druid/dzookeeper
        - druid/db
        - druid/coordinator
  services:
    middlemanager-svc:
      port: 8091
      container: druid
      protocol: tcp
      host-port: <- `${middlemanager_port}`

router:
  defines: runnable
  inherits: druid/base
  metadata:
    private: true
  variables:
    image_tag:
      type: string
      value: 24.0.1
    router_port:
      type: string
      value: 8888
    volume_data:
      type: string
      value: <- `${monk-volume-path}/druid`
  containers:
    drouter:
      image-tag: <- `${image_tag}`
      image: apache/druid
      bash: /druid.sh router
      paths:
        - <- `${volume_data}/shared:/opt/shared`
  depends:
    wait-for:
      runnables:
        - druid/dzookeeper
        - druid/db
        - druid/coordinator
  services:
    router-svc:
      port: 8888
      container: drouter
      protocol: tcp
      host-port: <- `${router_port}`
